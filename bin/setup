#!/usr/bin/env ruby
require "fileutils"
require "optparse"

ENV["RAILS_ENV"] = "production"
ENV["EDITOR"] = "mate --wait"

options{
  local: false
}
OptionParser.new do |args|
  args.on(
    "--[no-]local",
    "Setup environment by local files."
  ) do |n|
    options[:local] = n
  end
end.parse!

# path to your application root.
APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  puts "== Installing dependencies =="
  # system! "gem install bundler --conservative"
  system!("bin/bundle config set --local path 'vendor/bundle'")
  if options[:local]
    system("bin/bundle check") || system!("bin/bundle install --local")
  else
    system("bin/bundle check") || system!("bin/bundle install")
  end

  # puts "\n== Copying sample files =="
  # unless File.exist?("config/database.yml")
  #   FileUtils.cp "config/database.yml.sample", "config/database.yml"
  # end

  unless File.exist?("config/master.key")
    puts "\n== Create secret key =="
    system!("bin/rails credentials:edit")
  end

  puts "\n== Preparing database =="
  system! "bin/rails db:reset"

  unless options[:local]
    puts "\n== Install javascripts dependencies =="
    system! "bin/rails yarn:install"
    puts "\n== Compile assets =="
    system! "bin/rails assets:clobber assets:precompile"
  end

  puts "\n== Removing old logs and tempfiles =="
  system! "bin/rails log:clear tmp:clear"

  # puts "\n== Restarting application server =="
  # system! "bin/rails restart"
  puts "\n== Setup succeeded! =="
end
